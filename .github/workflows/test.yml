name: Backend Tests

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: academias_db_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u root -ptest_password --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done
      
      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: mysql://root:test_password@127.0.0.1:3306/academias_db_test
      
      - name: Run Prisma Migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://root:test_password@127.0.0.1:3306/academias_db_test
      
      - name: Seed test data
        run: npx prisma db seed
        env:
          DATABASE_URL: mysql://root:test_password@127.0.0.1:3306/academias_db_test
          NODE_ENV: test
      
      - name: Run tests with coverage
        run: npm test -- --coverage --verbose
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://root:test_password@127.0.0.1:3306/academias_db_test
          JWT_SECRET: test_secret_key_minimum_32_characters_long
          JWT_REFRESH_SECRET: test_refresh_secret_key_minimum_32_chars
          JWT_EXPIRES_IN: 24h
          JWT_REFRESH_EXPIRES_IN: 7d
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: backend
          fail_ci_if_error: false
      
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const status = total.statements.pct >= 80 ? 'PASS' : 'WARN';
            const body = `## Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | Statements | ${total.statements.pct}% |
            | Branches | ${total.branches.pct}% |
            | Functions | ${total.functions.pct}% |
            | Lines | ${total.lines.pct}% |
            
            [${status}] Coverage ${total.statements.pct >= 80 ? 'meets' : 'below'} 80% threshold`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: body
            })
